
subs.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <add>:
// pointers.c

int add(int a, int b)
{
   0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   4:	e28db000 	add	fp, sp, #0
   8:	e24dd014 	sub	sp, sp, #20
   c:	e50b0010 	str	r0, [fp, #-16]
  10:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  int result = a + b;
  14:	e51b2010 	ldr	r2, [fp, #-16]
  18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1c:	e0823003 	add	r3, r2, r3
  20:	e50b3008 	str	r3, [fp, #-8]
  return result;
  24:	e51b3008 	ldr	r3, [fp, #-8]
}
  28:	e1a00003 	mov	r0, r3
  2c:	e28bd000 	add	sp, fp, #0
  30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  34:	e12fff1e 	bx	lr

00000038 <main>:

int end  = 5;

int main()
{
  38:	e92d4800 	push	{fp, lr}
  3c:	e28db004 	add	fp, sp, #4
  40:	e24dd008 	sub	sp, sp, #8
  int num = 0;
  44:	e3a03000 	mov	r3, #0
  48:	e50b3008 	str	r3, [fp, #-8]
  int result; 
  while (num < end) {
  4c:	ea000005 	b	68 <main+0x30>
    result = add(num, num+1);
  50:	e51b3008 	ldr	r3, [fp, #-8]
  54:	e2833001 	add	r3, r3, #1
  58:	e1a01003 	mov	r1, r3
  5c:	e51b0008 	ldr	r0, [fp, #-8]
  60:	ebfffffe 	bl	0 <add>
  64:	e50b000c 	str	r0, [fp, #-12]
  while (num < end) {
  68:	e59f3024 	ldr	r3, [pc, #36]	; 94 <main+0x5c>
  6c:	e5933000 	ldr	r3, [r3]
  70:	e51b2008 	ldr	r2, [fp, #-8]
  74:	e1520003 	cmp	r2, r3
  78:	bafffff4 	blt	50 <main+0x18>
  }
  
  asm("swi 0x11\n"); // exit
  7c:	ef000011 	svc	0x00000011
  80:	e3a03000 	mov	r3, #0
  84:	e1a00003 	mov	r0, r3
  88:	e24bd004 	sub	sp, fp, #4
  8c:	e8bd4800 	pop	{fp, lr}
  90:	e12fff1e 	bx	lr
  94:	00000000 	.word	0x00000000
